<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCursor</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-6</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gridX = 0;
gridY = 0;

hoverNode = noone;

selectedActor = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = mouse_x;
y = mouse_y;

gridX = floor(x/GRID_SIZE);
gridY = floor(y/GRID_SIZE);

if(gridX &lt; 0 || gridY &lt; 0 || gridX &gt;= room_width/GRID_SIZE || gridY &gt;= room_height/GRID_SIZE){
    hoverNode = noone;
}else{
    hoverNode = global.map[gridX, gridY];
    }
    
if(mouse_check_button(mb_left)){
    if(hoverNode.occupant != noone &amp;&amp; object_get_name(hoverNode.occupant.object_index) != "oLastGate"){
        selectedActor = hoverNode.occupant;
    }else{
        selectedActor = noone;
    }
}

if(mouse_check_button(mb_middle) &amp;&amp; hoverNode.occupant != noone){
        hoverNode.occupant.slot1 = noone;
        hoverNode.occupant.slot2 = noone;
        hoverNode.occupant.slot3 = noone;
        hoverNode.occupant.slot4 = noone;
}

if(mouse_check_button(mb_right)){
   if(selectedActor != noone &amp;&amp; hoverNode.occupant != noone &amp;&amp; object_get_name(hoverNode.occupant.object_index) != "oFlip"){
    if(object_get_name(hoverNode.occupant.object_index) != "oLastGate" &amp;&amp; object_get_name(hoverNode.occupant.object_index) != "oLastGate2"){
        if(hoverNode.occupant.slot1 == noone){
        hoverNode.occupant.slot1 = selectedActor;
        }
        else if(hoverNode.occupant.slot2 == noone){
        hoverNode.occupant.slot2 = selectedActor;
        }/*
        else if(hoverNode.occupant.slot3 == noone){
        hoverNode.occupant.slot3 = selectedActor;
        }
        else if(hoverNode.occupant.slot4 == noone){
        hoverNode.occupant.slot4 = selectedActor;
        }*/else{
        hoverNode.occupant.slot1 = noone;
        hoverNode.occupant.slot2 = noone;
        hoverNode.occupant.slot3 = noone;
        hoverNode.occupant.slot4 = noone;
        }

        
        /*first clear the node of selectedActor
        map[selectedActor.gridX, selectedActor.gridY].occupant = noone;
        
        //update selectedActors position
        selectedActor.gridX = gridX;
        selectedActor.gridY = gridY;
        selectedActor.x = hoverNode.x;
        selectedActor.y = hoverNode.y;
        
        //update new node's occupant
        hoverNode.occupant = selectedActor;
        */
        //deselect selected actor
        selectedActor = noone;
    }else if(selectedActor != noone &amp;&amp; hoverNode.occupant != noone){
        hoverNode.occupant.slot1 = selectedActor;
        selectedActor = noone;
    }else{
       selectedActor = noone; 
    }
}
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(hoverNode != noone){
    draw_sprite(sSelected, -1, gridX * GRID_SIZE, gridY * GRID_SIZE);
    }

draw_self();

if(hoverNode != noone){
    tempText = string(gridX) + " / " + string(gridY)+ " = ";
    
    if(hoverNode.occupant != noone){
        tempText += hoverNode.occupant.name;
    }else{
        tempText += "noone";
    }
    
    
    draw_set_color(c_black);
    draw_rectangle(0, 0, string_width(tempText), string_height(tempText), false);
    
    draw_set_colour(c_white);
    draw_text(0, 0, tempText);

}

if(selectedActor != noone){
    tempText = selectedActor.name;
    
    draw_set_color(c_black);
    draw_rectangle(0, room_height, string_width(tempText), room_height - string_height(tempText), false)
    
    draw_set_color(c_white);
    draw_text(0, room_height - string_height(tempText), tempText);
    
    draw_line_width_color(selectedActor.gridX * GRID_SIZE + 16, selectedActor.gridY * GRID_SIZE + 16, x, y, 3, c_red, c_blue);
}
var roomname = room_get_name(room);
if(roomname = "logic2"){
Expression = "(A * B) + (C * D)";
draw_set_color(c_black);
    draw_rectangle(50, room_height - 100, string_width(Expression) + 50, room_height - 100 - string_height(Expression), false)
    
    draw_set_color(c_white);
    draw_text(50,room_height - 100 - string_height(Expression), Expression);
    }
    var roomname = room_get_name(room);
    if(roomname = "logic1"){
    Expression2 = "(A * B)";
    draw_set_color(c_black);
    draw_rectangle(50, room_height - 100, string_width(Expression2) + 50, room_height - 100 - string_height(Expression2), false)
    
    draw_set_color(c_white);
    draw_text(50,room_height - 100 - string_height(Expression2), Expression2);
    
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
