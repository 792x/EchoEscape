<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>globalvar map;

mapWidth = room_width/GRID_SIZE;
mapHeight = room_height/GRID_SIZE;

//create grid of node objects
for(xx = 0; xx &lt; mapWidth; xx += 1){
    for(yy = 0; yy &lt; mapWidth; yy += 1){
        map[xx, yy] = instance_create(xx * GRID_SIZE, yy * GRID_SIZE, oNode)
    }
}

for(xx = 0; xx &lt; mapWidth; xx += 1){
    for(yy = 0; yy &lt; mapHeight; yy += 1){
        node = map[xx, yy];
        
        
        //add left neighbor
        if(xx &gt; 0){
            ds_list_add(node.neighbors, map[xx - 1, yy]);
        }
        
        //add right neighbor
        if(xx &lt; mapWidth - 1){
            ds_list_add(node.neighbors, map[xx + 1, yy]);
        }
        
        //add top neighbor
        if(yy &gt; 0){
            ds_list_add(node.neighbors, map[xx, yy - 1]);
        }
        
        //add bottom neighbor
        if(yy &lt; mapHeight -1){
            ds_list_add(node.neighbors, map[xx, yy + 1]);
        }
        
        //add top left neighbor
        if(xx &gt; 0 &amp;&amp; yy &gt; 0){
            ds_list_add(node.neighbors, map[xx - 1, yy - 1]);
        }
                
        //add top right neighbor
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &gt; 0){
            ds_list_add(node.neighbors, map[xx + 1, yy - 1]);
        }
         
        //add bottom left neighbor
        if(xx &gt; 0 &amp;&amp; yy &lt; mapHeight - 1){
            ds_list_add(node.neighbors, map[xx - 1, yy + 1]);
        }
         
        //add bottom right neighbor
        if(xx &lt; mapWidth - 1 &amp;&amp; yy &lt; mapHeight - 1){
            ds_list_add(node.neighbors, map[xx + 1, yy + 1]);
        }
 
    }
}

instance_create(0, 0, oCursor);


//how you put things in
var inst1 = instance_create(13 * GRID_SIZE, 12 * GRID_SIZE, oFlip);
with(inst1){
    gridX = 13;
    gridY = 12;
    name = "Flip A";
    global.map[gridX, gridY].occupant = id;
    key = 'A';
}
var inst2 = instance_create(13 * GRID_SIZE, 13 * GRID_SIZE, oFlip);
with(inst2){
    gridX = 13;
    gridY = 13;
    name = "Flip B";
    global.map[gridX, gridY].occupant = id;
    key = 'B';
}
var inst3 = instance_create(13 * GRID_SIZE, 14 * GRID_SIZE, oFlip);
with(inst3){
    gridX = 13;
    gridY = 14;
    name = "Flip C";
    global.map[gridX, gridY].occupant = id;
    key = 'C';

}
var inst4 = instance_create(13 * GRID_SIZE, 15 * GRID_SIZE, oFlip);
with(inst4){
    gridX = 13;
    gridY = 15;
    name = "Flip D";
    global.map[gridX, gridY].occupant = id;
    key = 'D';
}

with(instance_create(18 * GRID_SIZE, 10 * GRID_SIZE, oGateAnd)){
    gridX = 18;
    gridY = 10;
    name = "And Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(18 * GRID_SIZE, 12 * GRID_SIZE, oGateAnd)){
    gridX = 18;
    gridY = 12;
    name = "And Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(22 * GRID_SIZE, 10 * GRID_SIZE, oGateOr)){
    gridX = 22;
    gridY = 10;
    name = "Or Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(22 * GRID_SIZE, 12 * GRID_SIZE, oGateOr)){
    gridX = 22;
    gridY = 12;
    name = "Or Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(26 * GRID_SIZE, 10 * GRID_SIZE, oGateNand)){
    gridX = 26;
    gridY = 10;
    name = "Nand Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(26 * GRID_SIZE, 12 * GRID_SIZE, oGateNand)){
    gridX = 26;
    gridY = 12;
    name = "Nand Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(18 * GRID_SIZE, 15 * GRID_SIZE, oGateNor)){
    gridX = 18;
    gridY = 15;
    name = "Nor Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(18 * GRID_SIZE, 17 * GRID_SIZE, oGateNor)){
    gridX = 18;
    gridY = 17;
    name = "Nor Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(22 * GRID_SIZE, 15 * GRID_SIZE, oGateXor)){
    gridX = 22;
    gridY = 15;
    name = "Xor Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(22 * GRID_SIZE, 17 * GRID_SIZE, oGateXor)){
    gridX = 22;
    gridY = 17;
    name = "Xor Gate";
    global.map[gridX, gridY].occupant = id;
}

with(instance_create(33 * GRID_SIZE, 15 * GRID_SIZE, oLastGate)){
    gridX = 33;
    gridY = 15;
    name = "Last Gate";
    global.map[gridX, gridY].occupant = id;
    flip1 = inst1;
    flip2 = inst2;
    flip3 = inst3;
    flip4 = inst4;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
