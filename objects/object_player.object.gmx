<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>player_idle_right</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//initialize variables
grav = 0.5;
hsp = 0;
vsp = 0;
hsp_carry = 0;
jumpspeed = 12;
movespeed = 4;
key_down = 0;
horMiddle = 0;
vertMiddle = 0;
grounded = true;
onebox = true;
global.collectibles = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//get player input
key_right = keyboard_check(vk_right);
key_left = -keyboard_check(vk_left);
key_jump = keyboard_check_pressed(vk_up);
key_jump_held = keyboard_check(vk_up);
key_down = keyboard_check(vk_down);

//use inputs
move = key_left + key_right;
hsp = move * movespeed;
if (vsp &lt; 10) vsp += grav;

if (place_meeting(x,y+1, object_wall)){
    if (key_jump){
     vsp = -jumpspeed;
     audio_play_sound(jump, 10, false);
     }
}



//jumps
if (vsp &lt; 0) &amp;&amp; (!key_jump_held) vsp = max(vsp,-jumpspeed/2)


var hsp_final = hsp + hsp_carry;
hsp_carry = 0;

//textbox on interact
horMiddle = view_xview[0] + (view_wview * 0.5);
vertMiddle = view_yview[0] + (view_hview * 0.5);
//if (distance_to_object(object_beam)  &lt; 50) {
//    scr_text("this is a test string",0.5, horMiddle, vertMiddle);
//}

if (distance_to_object(object_console)  &lt; 50) {
    if (global.collectibles &gt;= 2){
        if(onebox) scr_text("press E to interact",0.5, horMiddle, vertMiddle);
        onebox = false;
        if (keyboard_check(ord("E")) &amp;&amp; distance_to_object(object_console)  &lt; 50) {
        room_goto(logic1);;

    }
        
    }
    else {
        if(onebox) scr_text("You need more wires before you can manipulate the console.",0.5, horMiddle, vertMiddle);
        onebox = false;
    }
}

if (distance_to_object(object_console2)  &lt; 50) {
    if (global.collectibles &gt;= 2){
        if(onebox) scr_text("press E to interact",0.5, horMiddle, vertMiddle);
        onebox = false;
        if (keyboard_check(ord("E")) &amp;&amp; distance_to_object(object_console2)  &lt; 50) {
        room_goto(logic2);
    }
        
    }
    else {
        if(onebox) scr_text("You need more wires before you can manipulate the console.",0.5, horMiddle, vertMiddle);
        onebox = false;
    }
}


if ((distance_to_object(object_console) &gt; 100) &amp;&amp; (distance_to_object(object_console2)  &gt; 100)) {
    with (object_message) instance_destroy();
    onebox = true;
}





//horizontal collision
if(place_meeting(x+hsp_final,y,object_wall)){
    while(!place_meeting(x+sign(hsp_final),y,object_wall)){
        x += sign(hsp_final);
    }
    hsp_final = 0;
    hsp = 0;
}
x += hsp_final;

//vertical collision
if(place_meeting(x,y+vsp,object_wall)){
    while(!place_meeting(x,y+sign(vsp),object_wall)){
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;


//animations
image_speed = 0.5;
if (move != 0) image_xscale = move;
if (place_meeting(x,y+1, object_wall)){
    if (move!=0) sprite_index = player_run_right; else sprite_index = player_idle_right;
    
}
else
{
    if (vsp &lt; 0){ 
    sprite_index = player_jump_right; 
    
    }
    
    else{ 
    sprite_index = player_falling;
    
    }

}




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (file_exists("Save.sav")) file_delete("Save.sav");
var SaveFile = file_text_open_write("Save.sav");
var SavedRoom = room;
file_text_write_real(SaveFile,SavedRoom);
file_text_close(SaveFile);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
